/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/UEM8zTUlGCy
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
import { Button } from "@/components/ui/button"
import { useState } from "react"

// export function AudioPlayer() {
//   return (
//     <div className="flex items-center justify-between p-4 bg-zinc-100 rounded-xl dark:bg-zinc-800">
//       <div className="flex items-center gap-4">
//         <Button size="icon" variant="ghost">
//           <PlayCircleIcon className="h-6 w-6" />
//           <span className="sr-only">Play</span>
//         </Button>
//         <Button size="icon" variant="ghost">
//           <PauseCircleIcon className="h-6 w-6" />
//           <span className="sr-only">Pause</span>
//         </Button>
//         <Button size="icon" variant="ghost">
//           <CircleIcon className="h-6 w-6" />
//           <span className="sr-only">Resume</span>
//         </Button>
//         <Button size="icon" variant="ghost">
//           <XCircleIcon className="h-6 w-6" />
//           <span className="sr-only">Stop</span>
//         </Button>
//         <Button size="icon" variant="ghost">
//           <VolumeXIcon className="h-6 w-6" />
//           <span className="sr-only">Mute</span>
//         </Button>
//         <Button size="icon" variant="ghost">
//           <Volume2Icon className="h-6 w-6" />
//           <span className="sr-only">Unmute</span>
//         </Button>
//       </div>
//     </div>
//   )
// }


export function AudioPlayer({ audioREF }) {
  // const audioRef = audioREF // Reference to the audio element
  const [isPlaying, setIsPlaying] = useState(false); // State to track play status
  const [isMuted, setIsMuted] = useState(false); // State to track mute status

  const togglePlayPause = () => {
    const audio = audioREF;
    if (audio.paused) {
      audio.play();
      setIsPlaying(true);
    } else {
      audio.pause();
      setIsPlaying(false);
    }
  };

  const stopPlayback = () => {
    const audio = audioREF;
    audio.pause();
    audio.currentTime = 0;
    setIsPlaying(false);
  };

  const toggleMute = () => {
    const audio = audioREF;
    audio.muted = !audio.muted;
    setIsMuted(audio.muted);
  };

  return (
    <div className="flex items-center justify-between p-4 bg-zinc-100 rounded-xl dark:bg-zinc-800">
      <audio ref={audioREF} src={audioREF} />
      <div className="flex items-center gap-4">
        <Button size="icon" variant="ghost" onClick={togglePlayPause}>
          {isPlaying ? <PauseCircleIcon className="h-6 w-6" /> : <PlayCircleIcon className="h-6 w-6" />}
          <span className="sr-only">{isPlaying ? 'Pause' : 'Play'}</span>
        </Button>
        <Button size="icon" variant="ghost" onClick={stopPlayback}>
          <XCircleIcon className="h-6 w-6" />
          <span className="sr-only">Stop</span>
        </Button>
        <Button size="icon" variant="ghost" onClick={toggleMute}>
          {isMuted ? <VolumeXIcon className="h-6 w-6" /> : <Volume2Icon className="h-6 w-6" />}
          <span className="sr-only">{isMuted ? 'Unmute' : 'Mute'}</span>
        </Button>
      </div>
    </div>
  )
}


function CircleIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
    </svg>
  )
}


function PauseCircleIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <line x1="10" x2="10" y1="15" y2="9" />
      <line x1="14" x2="14" y1="15" y2="9" />
    </svg>
  )
}


function PlayCircleIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <polygon points="10 8 16 12 10 16 10 8" />
    </svg>
  )
}


function Volume2Icon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5" />
      <path d="M15.54 8.46a5 5 0 0 1 0 7.07" />
      <path d="M19.07 4.93a10 10 0 0 1 0 14.14" />
    </svg>
  )
}


function VolumeXIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5" />
      <line x1="22" x2="16" y1="9" y2="15" />
      <line x1="16" x2="22" y1="9" y2="15" />
    </svg>
  )
}


function XCircleIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <path d="m15 9-6 6" />
      <path d="m9 9 6 6" />
    </svg>
  )
}
